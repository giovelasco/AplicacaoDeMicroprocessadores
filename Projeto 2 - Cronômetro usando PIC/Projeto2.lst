;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 03/11/2024 12:50:34
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF77  	GOTO        238
_interrupt:
;Projeto2.c,34 :: 		void interrupt() {
0x0008	0xF015C000  	MOVFF       R0, 21
;Projeto2.c,36 :: 		if (INTCON.INT0IF) {
0x000C	0xA2F2      	BTFSS       INTCON, 1 
0x000E	0xD00D      	BRA         L_interrupt0
;Projeto2.c,37 :: 		INTCON.INT0IF = 0;               // Limpa a flag de interrupção
0x0010	0x92F2      	BCF         INTCON, 1 
;Projeto2.c,38 :: 		TMR0H = 0x0B;                    // Carrega o valor de recarga para 250 ms
0x0012	0x0E0B      	MOVLW       11
0x0014	0x6ED7      	MOVWF       TMR0H 
;Projeto2.c,39 :: 		TMR0L = 0xCC;
0x0016	0x0ECC      	MOVLW       204
0x0018	0x6ED6      	MOVWF       TMR0L 
;Projeto2.c,40 :: 		interrupcoes_por_incremento = 4; // 4 interrupções de 250 ms para 1 segundo
0x001A	0x0E04      	MOVLW       4
0x001C	0x6E26      	MOVWF       _interrupcoes_por_incremento 
0x001E	0x0E00      	MOVLW       0
0x0020	0x6E27      	MOVWF       _interrupcoes_por_incremento+1 
;Projeto2.c,41 :: 		contagem_ativa = 1;              // Ativa a contagem
0x0022	0x0E01      	MOVLW       1
0x0024	0x6E24      	MOVWF       _contagem_ativa 
0x0026	0x0E00      	MOVLW       0
0x0028	0x6E25      	MOVWF       _contagem_ativa+1 
;Projeto2.c,42 :: 		}
L_interrupt0:
;Projeto2.c,45 :: 		if (INTCON3.INT1IF) {
0x002A	0xA0F0      	BTFSS       INTCON3, 0 
0x002C	0xD00D      	BRA         L_interrupt1
;Projeto2.c,46 :: 		INTCON3.INT1IF = 0;              // Limpa a flag de interrupção
0x002E	0x90F0      	BCF         INTCON3, 0 
;Projeto2.c,47 :: 		TMR0H = 0x0B;                    // Carrega o valor de recarga para 250 ms
0x0030	0x0E0B      	MOVLW       11
0x0032	0x6ED7      	MOVWF       TMR0H 
;Projeto2.c,48 :: 		TMR0L = 0xCC;
0x0034	0x0ECC      	MOVLW       204
0x0036	0x6ED6      	MOVWF       TMR0L 
;Projeto2.c,49 :: 		interrupcoes_por_incremento = 1; // Apenas 1 interrupção para 250 ms
0x0038	0x0E01      	MOVLW       1
0x003A	0x6E26      	MOVWF       _interrupcoes_por_incremento 
0x003C	0x0E00      	MOVLW       0
0x003E	0x6E27      	MOVWF       _interrupcoes_por_incremento+1 
;Projeto2.c,50 :: 		contagem_ativa = 1;              // Ativa a contagem
0x0040	0x0E01      	MOVLW       1
0x0042	0x6E24      	MOVWF       _contagem_ativa 
0x0044	0x0E00      	MOVLW       0
0x0046	0x6E25      	MOVWF       _contagem_ativa+1 
;Projeto2.c,51 :: 		}
L_interrupt1:
;Projeto2.c,54 :: 		if (INTCON.TMR0IF && contagem_ativa) {
0x0048	0xA4F2      	BTFSS       INTCON, 2 
0x004A	0xD034      	BRA         L_interrupt4
0x004C	0x5024      	MOVF        _contagem_ativa, 0 
0x004E	0x1025      	IORWF       _contagem_ativa+1, 0 
0x0050	0xE031      	BZ          L_interrupt4
L__interrupt11:
;Projeto2.c,55 :: 		INTCON.TMR0IF = 0;               // Limpa a flag de interrupção do Timer0
0x0052	0x94F2      	BCF         INTCON, 2 
;Projeto2.c,56 :: 		TMR0H = 0x0B;                    // Recarrega o Timer0 com o valor inicial para 250 ms
0x0054	0x0E0B      	MOVLW       11
0x0056	0x6ED7      	MOVWF       TMR0H 
;Projeto2.c,57 :: 		TMR0L = 0xCC;
0x0058	0x0ECC      	MOVLW       204
0x005A	0x6ED6      	MOVWF       TMR0L 
;Projeto2.c,60 :: 		contador_interrupcoes++;
0x005C	0x4A22      	INFSNZ      _contador_interrupcoes, 1 
0x005E	0x2A23      	INCF        _contador_interrupcoes+1, 1 
;Projeto2.c,63 :: 		if (contador_interrupcoes >= interrupcoes_por_incremento) {
0x0060	0x0E80      	MOVLW       128
0x0062	0x1823      	XORWF       _contador_interrupcoes+1, 0 
0x0064	0x6E00      	MOVWF       R0 
0x0066	0x0E80      	MOVLW       128
0x0068	0x1827      	XORWF       _interrupcoes_por_incremento+1, 0 
0x006A	0x5C00      	SUBWF       R0, 0 
0x006C	0xE102      	BNZ         L__interrupt15
0x006E	0x5026      	MOVF        _interrupcoes_por_incremento, 0 
0x0070	0x5C22      	SUBWF       _contador_interrupcoes, 0 
L__interrupt15:
0x0072	0xE320      	BNC         L_interrupt5
;Projeto2.c,64 :: 		contador_interrupcoes = 0; // Reseta o contador de interrupções
0x0074	0x6A22      	CLRF        _contador_interrupcoes 
0x0076	0x6A23      	CLRF        _contador_interrupcoes+1 
;Projeto2.c,67 :: 		contador++;
0x0078	0x4A16      	INFSNZ      _contador, 1 
0x007A	0x2A17      	INCF        _contador+1, 1 
;Projeto2.c,68 :: 		if (contador >= 10) {
0x007C	0x0E80      	MOVLW       128
0x007E	0x1817      	XORWF       _contador+1, 0 
0x0080	0x6E00      	MOVWF       R0 
0x0082	0x0E80      	MOVLW       128
0x0084	0x5C00      	SUBWF       R0, 0 
0x0086	0xE102      	BNZ         L__interrupt16
0x0088	0x0E0A      	MOVLW       10
0x008A	0x5C16      	SUBWF       _contador, 0 
L__interrupt16:
0x008C	0xE302      	BNC         L_interrupt6
;Projeto2.c,69 :: 		contador = 0;
0x008E	0x6A16      	CLRF        _contador 
0x0090	0x6A17      	CLRF        _contador+1 
;Projeto2.c,70 :: 		}
L_interrupt6:
;Projeto2.c,73 :: 		PORTD = segmentos[contador];
0x0092	0x0E18      	MOVLW       _segmentos
0x0094	0x2416      	ADDWF       _contador, 0 
0x0096	0x6EE9      	MOVWF       FSR0L 
0x0098	0x0E00      	MOVLW       hi_addr(_segmentos)
0x009A	0x2017      	ADDWFC      _contador+1, 0 
0x009C	0x6EEA      	MOVWF       FSR0L+1 
0x009E	0xFF83CFEE  	MOVFF       POSTINC0, PORTD
;Projeto2.c,76 :: 		if (contador == 0) {
0x00A2	0x0E00      	MOVLW       0
0x00A4	0x1817      	XORWF       _contador+1, 0 
0x00A6	0xE102      	BNZ         L__interrupt17
0x00A8	0x0E00      	MOVLW       0
0x00AA	0x1816      	XORWF       _contador, 0 
L__interrupt17:
0x00AC	0xE102      	BNZ         L_interrupt7
;Projeto2.c,77 :: 		PORTC.RC0 = 1; // Liga o underscore
0x00AE	0x8082      	BSF         PORTC, 0 
;Projeto2.c,78 :: 		} else {
0x00B0	0xD001      	BRA         L_interrupt8
L_interrupt7:
;Projeto2.c,79 :: 		PORTC.RC0 = 0; // Desliga o underscore
0x00B2	0x9082      	BCF         PORTC, 0 
;Projeto2.c,80 :: 		}
L_interrupt8:
;Projeto2.c,81 :: 		}
L_interrupt5:
;Projeto2.c,82 :: 		}
L_interrupt4:
;Projeto2.c,83 :: 		}
L_end_interrupt:
L__interrupt14:
0x00B4	0xF000C015  	MOVFF       21, R0
0x00B8	0x0011      	RETFIE      1
; end of _interrupt
_config:
;Projeto2.c,10 :: 		void config() {
;Projeto2.c,12 :: 		TRISB = 0b00000011;    // RB0 e RB1 como entrada (botões)
0x00BA	0x0E03      	MOVLW       3
0x00BC	0x6E93      	MOVWF       TRISB 
;Projeto2.c,13 :: 		TRISD = 0x00;          // Porta D como saída (display de 7 segmentos)
0x00BE	0x6A95      	CLRF        TRISD 
;Projeto2.c,14 :: 		TRISC = 0xFE;          // RC0 como saída para controlar o underscore
0x00C0	0x0EFE      	MOVLW       254
0x00C2	0x6E94      	MOVWF       TRISC 
;Projeto2.c,17 :: 		T0CON = 0B00000010;  //TIMER_OFF, MOD_16BITS, TIMER, PRES_1:8
0x00C4	0x0E02      	MOVLW       2
0x00C6	0x6ED5      	MOVWF       T0CON 
;Projeto2.c,20 :: 		TMR0H = 0x0B;          // Parte alta do valor inicial (0xC2F7)
0x00C8	0x0E0B      	MOVLW       11
0x00CA	0x6ED7      	MOVWF       TMR0H 
;Projeto2.c,21 :: 		TMR0L = 0xCC;          // Parte baixa do valor inicial
0x00CC	0x0ECC      	MOVLW       204
0x00CE	0x6ED6      	MOVWF       TMR0L 
;Projeto2.c,22 :: 		INTCON.TMR0IF = 0;  // Zera a Flag  (vai p/ 1 quando ocorrer o overflow)
0x00D0	0x94F2      	BCF         INTCON, 2 
;Projeto2.c,23 :: 		T0CON.TMR0ON = 1;   // Liga o TIMER0
0x00D2	0x8ED5      	BSF         T0CON, 7 
;Projeto2.c,26 :: 		INTCON = 0xE0;   // Habilita interrupções globais, TMR0 e externas
0x00D4	0x0EE0      	MOVLW       224
0x00D6	0x6EF2      	MOVWF       INTCON 
;Projeto2.c,29 :: 		PORTD = 0x00;    // Display desligado
0x00D8	0x6A83      	CLRF        PORTD 
;Projeto2.c,30 :: 		PORTC.RC0 = 0;   // Underscore desligado inicialmente
0x00DA	0x9082      	BCF         PORTC, 0 
;Projeto2.c,31 :: 		}
L_end_config:
0x00DC	0x0012      	RETURN      0
; end of _config
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x00DE	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x00E0	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x00E4	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x00E6	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x00E8	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x00EA	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x00EC	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x00EE	0xF000EC85  	CALL        266, 0
;Projeto2.c,85 :: 		void main() {
;Projeto2.c,86 :: 		config(); // Configura as portas e registradores
0x00F2	0xDFE3      	RCALL       _config
;Projeto2.c,87 :: 		while(1) {
L_main9:
;Projeto2.c,90 :: 		}
0x00F4	0xD7FF      	BRA         L_main9
;Projeto2.c,91 :: 		}
L_end_main:
0x00F6	0xD7FF      	BRA         $+0
; end of _main
0x010A	0xF016EE10  	LFSR        1, 22
0x010E	0x0E12      	MOVLW       18
0x0110	0x6E00      	MOVWF       R0 
0x0112	0x0E01      	MOVLW       1
0x0114	0x6E01      	MOVWF       R1 
0x0116	0x0EF8      	MOVLW       248
0x0118	0x6EF6      	MOVWF       4086 
0x011A	0x0E00      	MOVLW       0
0x011C	0x6EF7      	MOVWF       TBLPTRH 
0x011E	0x0E00      	MOVLW       0
0x0120	0x6EF8      	MOVWF       TBLPTRU 
0x0122	0xF000EC6F  	CALL        222, 0
0x0126	0x0012      	RETURN      0
;Projeto2.c,0 :: ?ICS_contador
0x00F8	0x0000 ;?ICS_contador+0
; end of ?ICS_contador
;Projeto2.c,0 :: ?ICS_segmentos
0x00FA	0x063F ;?ICS_segmentos+0
0x00FC	0x4F5B ;?ICS_segmentos+2
0x00FE	0x6D66 ;?ICS_segmentos+4
0x0100	0x077D ;?ICS_segmentos+6
0x0102	0x6F7F ;?ICS_segmentos+8
; end of ?ICS_segmentos
;Projeto2.c,0 :: ?ICS_contador_interrupcoes
0x0104	0x0000 ;?ICS_contador_interrupcoes+0
; end of ?ICS_contador_interrupcoes
;Projeto2.c,0 :: ?ICS_contagem_ativa
0x0106	0x0000 ;?ICS_contagem_ativa+0
; end of ?ICS_contagem_ativa
;Projeto2.c,0 :: ?ICS_interrupcoes_por_incremento
0x0108	0x0004 ;?ICS_interrupcoes_por_incremento+0
; end of ?ICS_interrupcoes_por_incremento
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [178]    _interrupt
0x00BA      [36]    _config
0x00DE      [16]    ___CC2DW
0x00EE      [10]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [2]    _contador
0x0018      [10]    _segmentos
0x0022       [2]    _contador_interrupcoes
0x0024       [2]    _contagem_ativa
0x0026       [2]    _interrupcoes_por_incremento
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x00F8       [2]    ?ICS_contador
0x00FA      [10]    ?ICS_segmentos
0x0104       [2]    ?ICS_contador_interrupcoes
0x0106       [2]    ?ICS_contagem_ativa
0x0108       [2]    ?ICS_interrupcoes_por_incremento
